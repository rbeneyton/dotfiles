-- remind, after add: :helptags ALL

-- load setings common to 'page'
-- :luafile ~/.nvim.light.init.lua
require("init-light")

-- [[[ main settings

vim.api.nvim_set_option_value('number', true, {win = 0})
vim.api.nvim_set_option_value('relativenumber', true, {win = 0})
vim.api.nvim_set_option('ruler', true)
vim.api.nvim_set_option('showcmd', true)
vim.api.nvim_set_option('shadafile', "")

-- ]]]
-- [[[ mason/lsp

vim.cmd(":packadd mason")
require("mason").setup()

vim.cmd(":packadd mason-lspconfig")
require('mason-lspconfig').setup {
    -- FIXME how to force ruff ???
    ensure_installed = { "clangd", "cmake", "lua_ls" },
}
require('mason-lspconfig').setup_handlers {
    -- rustaceanvim will manage its conf
    ['rust_analyzer'] = function() end,
    -- ruff have its own server now
    -- ['ruff-lsp'] = function() end,
}

vim.cmd(":packadd nvim-lspconfig")
local lsp = require('lspconfig') -- XXX no local, as used later

-- toggle error diagnostic window
vim.keymap.set('n', '<leader>e', function()
    -- If we find a floating window, close it.
    local found_float = false
    for _, win in ipairs(vim.api.nvim_list_wins()) do
        if vim.api.nvim_win_get_config(win).relative ~= '' then
            vim.api.nvim_win_close(win, true)
            return
        end
    end
    vim.diagnostic.open_float(nil, { focus = false, scope = 'cursor' })
end, { desc = 'Toggle Diagnostics' })

vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        -- Enable completion triggered by <c-x><c-o>
        vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

        -- Buffer local mappings.
        -- See `:help vim.lsp.*` for documentation on any of the below functions
        local opts = { buffer = ev.buf }
        vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
        vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
        vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
        vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
        vim.keymap.set('n', '<leader>wa', vim.lsp.buf.add_workspace_folder, opts)
        vim.keymap.set('n', '<leader>wr', vim.lsp.buf.remove_workspace_folder, opts)
        vim.keymap.set('n', '<leader>wl', function()
            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
        end, opts)
        -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
        vim.keymap.set('n', '<leader>r', vim.lsp.buf.rename, opts)
        vim.keymap.set({ 'n', 'v' }, '<leader>a', vim.lsp.buf.code_action, opts)
        vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
        vim.keymap.set('n', '<leader>f', function()
            vim.lsp.buf.format { async = true }
        end, opts)

        -- toggle inlay
        vim.keymap.set('n', '<leader>i', function()
            vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled(), opts)
        end, opts)
    end
})

-- ]]]
-- [[[ cmp

vim.cmd(":packadd cmp-buffer")
vim.cmd(":packadd cmp-cmdline")
vim.cmd(":packadd cmp-cmdline-history")
vim.cmd(":packadd cmp-nvim-lsp")
vim.cmd(":packadd cmp-path")
vim.cmd(":packadd nvim-cmp")

vim.cmd("set completeopt=menu,menuone,noselect")
local cmp = require'cmp'
cmp.setup({
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
            vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        end,
    },
    window = {
        -- completion = cmp.config.window.bordered(),
        -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'vsnip' }, -- For vsnip users.
    }, {
        { name = 'buffer' },
    }),
    experimental = {
        ghost_text = true,
    },
})

-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = 'buffer' }
    }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
        { name = 'path' }
    }, {
        { name = 'cmdline' }
    }, {
        { name = 'cmdline_history' },
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
})

-- Set up lspconfig.
local capabilities = require('cmp_nvim_lsp').default_capabilities()
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
-- FIXME automatic list all lsp servers
require('lspconfig')['clangd'].setup { capabilities = capabilities }
require('lspconfig')['cmake'].setup { capabilities = capabilities }
require('lspconfig')['lua_ls'].setup { capabilities = capabilities }
require('lspconfig')['ruff'].setup { capabilities = capabilities }

-- ]]]
-- [[[ dap

vim.cmd(":packadd nvim-dap")
vim.cmd(":packadd nvim-dap-ui")
require("dapui").setup()

-- ]]]
-- [[[ main settings cont'd

-- old options dropped during lua convertion
-- set sessionoptions=buffers,folds,localoptions,options,tabpages,help
-- set sessionoptions-=blank       " for syntastic

-- ]]]
-- [[[ neo-tree

-- need plenary dependency
require("nvim-web-devicons").setup()
require("neo-tree").setup({
    popup_border_style = "rounded",
    buffers = {
        -- When working with sessions, for example, restored but unfocused buffers
        -- are mark as "unloaded". Turn this on to view these unloaded buffer.
        show_unloaded = true,
    },
    event_handlers = {
	{
		event = "neo_tree_buffer_enter",
		handler = function()
			vim.cmd 'highlight! Cursor blend=100'
			vim.cmd 'setlocal relativenumber'
		end,
	}
    },
})
-- shortcuts
-- XXX why not? vim.api.nvim_set_keymap("n", "\", ":Neotree toggle current reveal_force_cwd<CR>", { noremap = true})
vim.cmd([[:nnoremap \ :Neotree toggle current reveal_force_cwd<CR>]])
vim.cmd([[:nnoremap \| :Neotree toggle reveal current buffers dir=/<CR>]])
vim.cmd([[:nnoremap <Leader>s :Neotree toggle git_status<CR>]])

-- ]]]
-- [[[ Mappings

vim.api.nvim_set_keymap('n', '<C-PageDown>', ':bnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<C-PageUp>', ':bprevious<cr>', { noremap = true })

vim.api.nvim_set_keymap('n', '<kPlus>', ':cnext<CR>zv<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '+', ':cnext<CR>zv<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<kMinus>', ':cprevious<CR>zv<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '_', ':cprevious<CR>zv<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '-', ':cprevious<CR>zv<CR>', { noremap = true })

-- disable number / relativenumber for big files, to avoid to read to count lines
vim.api.nvim_create_autocmd('BufReadPre', {
    pattern = '*',
    callback = function(args)
        -- local cur_buf = vim.api.nvim_get_current_buf()
        -- local cur_name = vim.api.nvim_buf_get_name(cur_buf)
        -- local cur_sz = vim.fn.getfsize(cur_name)
        local cur_sz = vim.fn.getfsize(args.file)
        if cur_sz > 20 * 1024 * 1024 then
            vim.bo.ft = large
            vim.bo.swapfile = false
            vim.bo.bufhidden = unload
            vim.bo.undolevels = -1
            vim.wo.foldmethod = manual
            vim.wo.foldenable = false
            vim.wo.number = false
            vim.wo.relativenumber = false
            vim.opt_local.backup = false
            vim.opt_local.writebackup = false
            vim.opt_local.eventignore:append('FileType')
        else
            vim.opt_local.eventignore:remove('FileType')
        end
    end
})
-- autocmd Filetype * if getfsize(@%) > 1000000 | setlocal syntax=OFF | endif

-- open the quick list window after make
-- autocmd QuickFixCmdPost [^l]* nested botright cwindow 10
-- TODO really required?
vim.api.nvim_create_autocmd('QuickFixCmdPost', {
    pattern = '[^l]*',
    nested = true,
    command = "botright cwindow 10"
})

-- quickfix: jump on top, disable line numbers
-- autocmd BufWinEnter quickfix exe "normal! zt"
-- autocmd BufWinEnter quickfix set nonumber
-- autocmd BufWinEnter quickfix set norelativenumber
vim.api.nvim_create_autocmd({ 'VimEnter', 'WinEnter', 'BufWinEnter'}, {
    pattern = '*',
    callback = function()
        if vim.bo.filetype == 'quickfix' then
        vim.cmd('exe "normal! zt"')
        vim.wo.number = false
        vim.wo.relativenumber = false
        vim.wo.signcolumn = 'no'
        end
    end,
})

-- Have <esc> or mine C-j leave cmdline-window
-- Disable line numbers in command line window
vim.api.nvim_create_autocmd('CmdWinEnter', {
    callback = function()
        vim.keymap.set('n', '<ESC>', ':q<CR>', { noremap = true })
        vim.keymap.set('n', '<C-j>', ':q<CR>', { noremap = true })
        vim.wo.number = false
        vim.wo.relativenumber = false
        vim.wo.signcolumn = 'no'
    end,
})
-- restore mapping when leaving
vim.api.nvim_create_autocmd('CmdWinLeave', {
    callback = function()
        vim.keymap.del('n', '<ESC>')
        vim.keymap.del('n', '<C-j>')
    end,
})

-- map C-h to get cursor position by toggle cursorlines
vim.keymap.set('n', '<C-H>', function()
    vim.wo.cursorline = not(vim.wo.cursorline)
    vim.wo.cursorcolumn = not(vim.wo.cursorcolumn)
end, { noremap = true })

-- highlight yanked text
vim.api.nvim_create_autocmd('TextYankPost', {
    command = 'silent! lua vim.highlight.on_yank({ timeout = 500 })'
})

-- ]]]
-- [[[ filetypes

-- allow to use :let per buffer, when adding on first/last lines stuff like:
-- // VIM: let b:syntastic_c_cflags = "-DMACRO_XXX=2"
-- autocmd BufNewFile * let b:this_is_new_buffer=1
vim.api.nvim_create_autocmd({ 'BufNewFile'}, {
    pattern = '*',
    callback = function()
        vim.cmd('let b:this_is_new_buffer=1')
    end,
})
vim.api.nvim_create_autocmd({ 'BufEnter'}, {
    pattern = '*',
    callback = function()
        vim.cmd('call FirstModeLine()')
    end,
})

-- always backup session (reopen via vl alias)
-- autocmd VimLeave * mksession! ~/.cache/session.vim
vim.api.nvim_create_autocmd({ 'VimLeave'}, {
    pattern = '*',
    callback = function()
        vim.cmd('mksession! ~/.cache/session.vim')
    end,
})

-- remove trailing whitespace at write
vim.api.nvim_create_autocmd({ 'BufWritePre' }, {
    pattern = '*',
    callback = function()
        if vim.bo.filetype == 'c'
        or vim.bo.filetype == 'cpp'
        or vim.bo.filetype == 'mail'
        or vim.bo.filetype == 'asciidoc'
        or vim.bo.filetype == 'python'
        or vim.bo.filetype == 'gitcommit'
        or vim.bo.filetype == 'rust'
        then
            vim.cmd[[ :%s/\s\+$//e ]]
        end
    end,
})

-- ]]]
-- [[[ weird (outdated?) options

-- String to put at the start of lines that have been wrapped
vim.o.showbreak = '↪ '

-- ]]]
-- [[[ misc map

-- ESC with CTR-j
vim.api.nvim_set_keymap('i', '<C-j>', '<esc>l', { noremap = true })
vim.api.nvim_set_keymap('v', '<C-j>', '<esc>', { noremap = true })
vim.api.nvim_set_keymap('n', '<C-j>', '<esc>', { noremap = true })

-- ]]]
-- [[[ tags & cscope

-- TODO via lsp
-- g\ ->open tag of the word under cursor on a new window at right
-- nnoremap g\ <ESC>:vert :rightbelow :scscope <C-R>=expand("<cword>")<CR><CR>
-- nnoremap <C-\> <ESC>:vert :rightbelow :split :cstag <C-R>=expand("<cword>")<CR><CR>

vim.cmd([[
function! GetVisualSelection()
    let [s:lnum1, s:col1] = getpos("'<")[1:2]
    let [s:lnum2, s:col2] = getpos("'>")[1:2]
    let s:lines = getline(s:lnum1, s:lnum2)
    let s:lines[-1] = s:lines[-1][: s:col2 - (&selection == 'inclusive' ? 1 : 2)]
    let s:lines[0] = s:lines[0][s:col1 - 1:]
    return join(s:lines, ' ')
endfunction
]])

-- "all symbol
-- nnoremap <leader>s <ESC>:vert :rightbelow :scscope find s <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <leader>s <ESC>:execute ':vert :rightbelow :scscope find s '.GetVisualSelection()<CR>
-- "go to definition
-- "nnoremap <C-]> <ESC>:cstag <C-R>=expand("<cword>")<CR><CR>
-- nnoremap <C-]> <ESC>:scscope find g <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <C-]> <ESC>:execute ':cstag '.GetVisualSelection()<CR>
-- "go to definition / ctags version
-- nnoremap <C-p> <ESC>:tjump <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <C-p> <ESC>:execute ':tjump '.GetVisualSelection()<CR>
--
-- "nnoremap <C-\> <ESC>:vert :rightbelow :cstag <C-R>=expand("<cword>")<CR><CR>
-- nnoremap <C-\> <ESC>:vert :rightbelow :scscope find g <C-R>=expand("<cword>")<CR><CR>
-- "vnoremap <C-\> <ESC>:execute ':vert :rightbelow :cstag '.GetVisualSelection()<CR>
-- vnoremap <C-\> <ESC>:execute ':vert :rightbelow :scscope find g '.GetVisualSelection()<CR>
-- "calling this function
-- nnoremap <leader>c <ESC>:vert :rightbelow :scscope find c <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <leader>c <ESC>:execute ':vert :rightbelow :scscope find c '.GetVisualSelection()<CR>
-- "go to definition (cscope shortcut are weird)
-- nnoremap <leader>d <ESC>:vert :rightbelow :scscope find g <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <leader>d <ESC>:execute ':vert :rightbelow :scscope find g '.GetVisualSelection()<CR>
-- "including this file
-- nnoremap <leader>i <ESC>:vert :rightbelow :scscope find i <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <leader>i <ESC>:execute ':vert :rightbelow :scscope find i '.GetVisualSelection()<CR>
-- "find this text (avoid Ggrep)
-- nnoremap <leader>t <ESC>:vert :rightbelow :scscope find t <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <leader>t <ESC>:execute ':vert :rightbelow :scscope find t '.GetVisualSelection()<CR>
-- nnoremap <C-t> <ESC>:cscope find t <C-R>=expand("<cword>")<CR><CR>
-- vnoremap <C-t> <ESC>:execute ':cscope find t '.GetVisualSelection()<CR>
--
-- "manual jumpt to <args>
-- command! -nargs=1 Find cscope find g <args>
-- command! -nargs=1 VFind vert rightbelow scscope find g <args>

-- indent/deindent: stay in visual mode
vim.api.nvim_set_keymap('v', '<', '<gv', { noremap = true })
vim.api.nvim_set_keymap('v', '>', '>gv', { noremap = true })

-- move text up/down in visual
vim.api.nvim_set_keymap('v', '<S-j>', ':move >+1<CR>gv=gv<', { noremap = true })
vim.api.nvim_set_keymap('v', '<S-k>', ':move >-2<CR>gv=gv<', { noremap = true })

-- clean empty lines
vim.api.nvim_set_keymap('v', '<leader>l', ':g/^$/d<CR>', { noremap = true })

-- ]]]
-- [[[ macros

-- tt is command to align on space
vim.cmd([[
cab tt Tabularize /\S\+;
]])

-- Toggle &virtualedit
vim.cmd([[
function! Toggle_virtualedit_()
  if &virtualedit == 'all'
    set virtualedit=onemore " be on ending \n
  else
    set virtualedit=all
  endif
endfunction
]])
-- map <F7> <ESC>:call Toggle_virtualedit_()<CR>:set virtualedit?<CR>

-- map C-h to get cursor position by toggle cursorlines
vim.keymap.set({'i', 'n'}, '<F7>', function()
    if vim.wo.virtualedit == 'onemore'
    then
        vim.wo.virtualedit = 'all'
        print('virtualedit on')
    else
        vim.wo.virtualedit = 'onemore'
        print('virtualedit off')
    end
end,
    { noremap = true }
)

-- TODO find a way to define macros with
-- special character in lua
-- see lua/macros.lua.TODO
-- require("macros")

-- ]]]
-- [[[ maps

-- disable arrow keys
vim.keymap.set({'n', 'i'}, '<up>', '<nop>', { noremap = true })
vim.keymap.set({'n', 'i'}, '<down>', '<nop>', { noremap = true })
vim.keymap.set({'n', 'i'}, '<left>', '<nop>', { noremap = true })
vim.keymap.set({'n', 'i'}, '<right>', '<nop>', { noremap = true })

-- use real line movement when used without <count>
vim.keymap.set('n', 'j', function()
    if vim.v.count == 0 then
        return 'gj'
    else
        return 'j'
    end
end, { expr=true, noremap=true, silent=true })
vim.keymap.set('n', 'k', function()
    if vim.v.count == 0 then
        return 'gk'
    else
        return 'k'
    end
end, { expr=true, noremap=true, silent=true })

-- open command-line window directly
-- nnoremap <leader>; :
vim.keymap.set('n', '<leader>;', ':', { noremap = true })
-- open command-line window with history 
-- noremap q; q:
vim.keymap.set('n', 'q;', 'q:', { noremap = true })
-- note that q/ or q? open search-line window with history

-- in insert mode, C-o do completion previous and C-n do a normal command
vim.keymap.set('i', '<C-o>', '<C-n>', { noremap = true })
vim.keymap.set('i', '<C-n>', '<C-o>', { noremap = true })

-- command line mode: navigation exactly as own bash navigation
-- remind that C-f pop up command line window
vim.keymap.set('c', '<C-a>', '<Home>', { noremap = true })
vim.keymap.set('c', '<C-e>', '<End>', { noremap = true })
vim.keymap.set('c', '<C-o>', '<Down>', { noremap = true })
vim.keymap.set('c', '<C-v>', '<Right>', { noremap = true })
vim.keymap.set('c', '<C-n>', '<Left>', { noremap = true })
vim.keymap.set('c', '<C-g>', '<Del>', { noremap = true })
vim.keymap.set('c', '<C-h>', '<BackSpace>', { noremap = true })
vim.keymap.set('c', '<C-j>', '<C-c>', { noremap = true })

-- ]]]
-- [[[ macros cont'd

-- map to remove trailing spaces
-- nnoremap <Leader>b :s/\s\+$//e<CR>
-- vnoremap <Leader>b :s/\s\+$//e<CR>

-- alias M for make
vim.keymap.set('n', '<Leader>m', '<ESC>:wall<CR>:make<CR>', { noremap = true })
-- vim.keymap.set('n', '<Leader>M', '<ESC>:wall<CR>:set shell=/bin/bash\ -i<CR>:! mn<CR>:set shell=/bin/bash<CR>', { noremap = true })

-- alias x for :x
vim.keymap.set('n', '<Leader>x', '<ESC>:xa<CR>', { noremap = true })

-- " map to append a gerrit's changeId
-- function! Append_gen_changid()
--   " grep -m40 -ao '[0-9a-f]' /dev/urandom | head -n40 | paste -sd '' do the job
--   :read !LANG=C grep -m40 -ao -P '[\x30-\x39\x61-\x66]' /dev/urandom | head -n40 | paste -sd ''
-- endfunction
-- nnoremap <Leader>C <ESC>oChange-Id: I<ESC>:call Append_gen_changid()<CR>kJx<ESC>

-- clear the search register -> like :noh
vim.keymap.set('n', '<Leader>/', ':let@/=""<CR>', { silent = true, noremap = true })

-- grep on current word FIXME no quote
vim.keymap.set('n', '<Leader>g', '<ESC>:grep \"<C-R>=expand("<cword>")<CR>\"<CR>', { noremap = true })
vim.keymap.set('v', '<Leader>g', '<ESC>:execute \':grep \'.GetVisualSelection()<CR>', { noremap = true })
-- version with prompt before executing
vim.keymap.set('n', '<Leader>G', '<ESC>:grep <C-R>=expand("<cword>")<CR>', { noremap = true })
vim.keymap.set('v', '<Leader>G', '<ESC>:execute \':grep \'.GetVisualSelection()', { noremap = true })

-- ]]]
-- [[[ colortheme

-- switch light/dark via env variable theme
if vim.env.theme == 'light'
then
  vim.opt.background="light"
else
  vim.opt.background="dark"
end

vim.cmd("packadd kanagawa")
vim.opt.laststatus = 2 -- 3(unique statusline) drops info for no gain
vim.opt.fillchars:append({
    horiz = '━',
    horizup = '┻',
    horizdown = '┳',
    vert = '┃',
    vertleft = '┨',
    vertright = '┣',
    verthoriz = '╋',
})
require('kanagawa').setup {
  undercurl = true,           -- enable undercurls
  commentStyle = { italic = true },
  functionStyle = {},
  keywordStyle = { italic = true},
  statementStyle = { bold = true },
  typeStyle = {},
  transparent = false,        -- do not set background color
  dimInactive = true,        -- dim inactive window `:h hl-NormalNC`
  globalStatus = true,        -- adjust window separators highlight for laststatus=3
  terminalColors = true,      -- define vim.g.terminal_color_{0,17}
  colors = {},
  theme = "default"           -- Load "default" theme or the experimental "light" theme
}
-- vim.opt.winbar = "%=%m %f %n %p%%"
vim.cmd.colorscheme("kanagawa")

-- ]]]
-- [[[ neovim specific

-- neovim default is 'nvi', which is unusable and inhibit ~normal~ copy/paste
vim.opt.mouse = ""

-- exit from term with alt space (not binding by any shell or tool IMHO)
-- tnoremap <A-Space> <C-\><C-n>
vim.keymap.set('t', '<A-Space>', '<C-\\><C-n>', { noremap = true })

-- same history lenght than tmux
vim.cmd[[
let g:terminal_scrollback_buffer_size=99999
]]

-- ]]]
-- [[[ lualine options

vim.cmd("packadd lualine")
local function lualine_slime()
  if vim.b.slime_config
  and vim.b.slime_config['target_pane']
  then
    return '' .. vim.b.slime_config['target_pane']
  end
  return ''
end

require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {}, -- 'neo-tree'},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {
        {'branch', cond = function()
            return vim.api.nvim_win_get_width(0) > 70
        end,},
        'diff',
    },
    lualine_c = {'filename'},
    lualine_x = {
        lualine_slime,
        '%{ObsessionStatus("", "")}',
        'searchcount',
        {'filetype', cond = function()
            return vim.api.nvim_win_get_width(0) > 90
        end,},
    },
    lualine_y = {
        '%n', -- always buffer number
        'diagnostics'
    },
    lualine_z = {
        -- progress without fancy Top/Bot labels
        function()
            local cur = vim.fn.line('.')
            local total = vim.fn.line('$')
            return string.format('%2d%%%%', math.floor(cur / total * 100))
        end,
        'location'
    },
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {},
    lualine_y = {'%n'},
    lualine_z = {'location'}
  },
  tabline = {
    lualine_a = {
     -- {'buffers', mode=4} },
     { 'tabs',
       mode=2,
       tab_max_length = vim.o.columns,
       max_length = vim.o.columns, }
    },
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {}
  },
  winbar = {},
  inactive_winbar = {},
  extensions = {'quickfix', 'fugitive', 'neo-tree'}
}
vim.opt.showtabline = 1 -- disable tabs if only one

-- quick switch tab
vim.api.nvim_set_keymap('n', '<leader>1', ':1tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>2', ':2tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>3', ':3tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>4', ':4tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>5', ':5tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>6', ':6tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>7', ':7tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>8', ':8tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>9', ':9tabnext<cr>', { noremap = true })
vim.api.nvim_set_keymap('n', '<leader>-', ':tabnext #<cr>', { noremap = true })

-- ]]]
-- [[[ syntastic options

vim.cmd(":packadd syntastic")
vim.cmd([[

" TODO drop syntastic once LSP works

" XXX Syntastic fails to find your header files? Try 'make syntastic' in the
"     root directory of your repository.

" syntastic sign on one char, not two
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_style_error_symbol = 'S'
let g:syntastic_style_warning_symbol = 's'

" javascript makes vim freeze
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [ 'python', 'sh', 'php', 'c', 'cpp' ],
                           \ 'passive_filetypes': [ 'javascript'] }
" avoid error on generated by build include file
let g:syntastic_ignore_files = [ '\m^/usr/include/' ]
let g:syntastic_auto_loc_list=1
let g:syntastic_auto_jump=0
let g:syntastic_check_on_open=0
let g:syntastic_silent_make=0
let g:syntastic_loc_list_height=3
let g:syntastic_debug=0

]])
vim.cmd([[

let g:syntastic_c_compiler = 'clang'
let g:syntastic_c_compiler = 'gcc'
let g:syntastic_c_compiler_options = ''
let g:syntastic_c_compiler_options = "-std=gnu11 -Wall -Wextra -Wpedantic -DLINUX"
let g:syntastic_c_cflags = ''
" let g:syntastic_c_include_dirs = [ '...' ]
let g:syntastic_c_remove_include_errors = 0 " to avoid report error about unknown include
let g:syntastic_c_no_include_search = 1
let g:syntastic_c_no_default_include_dirs = 1
" let b:syntastic_c_cflags = "-DLINUX"
let g:syntastic_c_check_header = 1

let g:syntastic_cpp_compiler = 'clang++-6.0'
let g:syntastic_cpp_compiler_options = "-std=c++17 -Wall -Wno-unknown-pragmas -Wextra -Wpedantic -DLINUX"
let g:syntastic_cpp_include_dirs = [ '/home/beneyton/utils/boost_1_68_0/include/' ]
let g:syntastic_cpp_check_header = 1
" let g:syntastic_quiet_messages = {
"             \ "file:p":  ['....h'] } " discard report on those files
" suppress all msgpack related warning/error
" let g:syntastic_quiet_messages = {
"         \ "regex":  ['...\|...'],
"         \ "file:p":  ['...\|...'] }


let g:syntastic_cpp_remove_include_errors = 0 " to avoid report error about unknown include
let g:syntastic_cpp_no_include_search = 1
let g:syntastic_cpp_no_default_include_dirs = 1
"let g:syntastic_cpp_config_file='.clang_complete'
" let g:syntastic_cpp_pylint_quiet_messages = { "level": "errors" , \ "file:p": ['.*config.h'] }

let g:syntastic_python_compiler = 'pylint'
let g:syntastic_python_compiler_options = '--errors-only --rcfile=/home/richard/.pylintrc'
let g:syntastic_python_pylint_quiet_messages = { "level": "warnings" }

" disable syntastic for asciidoc (way too long)
let g:syntastic_asciidoc_checkers=[]

" disable ycm syntastic
" let g:syntastic_c_checkers=['gcc']
" let g:syntastic_cpp_checkers=['gcc']
let g:ycm_register_as_syntastic_checker = 1

" do not always ask to lod python .ycm_extra_conf.py
let g:ycm_confirm_extra_conf = 0

" close preview after accept
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" finally, not preview windows at all
let g:ycm_add_preview_to_completeopt = 0

"let g:syntastic_debug = 0
"let g:syntastic_debug_file = '/tmp/syntastic.log'

]])

-- ]]]
-- [[[ GitGutter opts

vim.wo.signcolumn = "yes"

require('gitsigns').setup{
on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    -- Actions
    map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
    map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
    map('n', '<leader>hS', gs.stage_buffer)
    map('n', '<leader>hu', gs.undo_stage_hunk)
    map('n', '<leader>hR', gs.reset_buffer)
    map('n', '<leader>hp', gs.preview_hunk)
    map('n', '<leader>hb', function() gs.blame_line{full=true} end)
    map('n', '<leader>tb', gs.toggle_current_line_blame)
    map('n', '<leader>hd', gs.diffthis)
    map('n', '<leader>hD', function() gs.diffthis('~') end)
    map('n', '<leader>td', gs.toggle_deleted)

    -- Text object
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
end
}

-- ]]]
-- [[[ tmux integration

vim.cmd("packadd tmux")
require('tmux')
vim.api.nvim_set_keymap("n", "<C-w>h", [[<cmd>lua require('tmux').move_left()<cr>]], { noremap = true })
vim.api.nvim_set_keymap("n", "<C-w>j", [[<cmd>lua require('tmux').move_down()<cr>]], { noremap = true })
vim.api.nvim_set_keymap("n", "<C-w>k", [[<cmd>lua require('tmux').move_up()<cr>]], { noremap = true })
vim.api.nvim_set_keymap("n", "<C-w>l", [[<cmd>lua require('tmux').move_right()<cr>]], { noremap = true })

-- ]]]
-- [[[ Slime opts

if vim.env.TMUX
then
  -- XXX C-c might be intercepted if timeoutlen is too low
  vim.g.slime_target = "tmux"
  local socket_name = vim.fn.split(vim.env.TMUX, ",")[1]
  vim.g.slime_default_config = {
  	socket_name = socket_name,
  	target_pane = "{last}", -- ":.1"
	}
  vim.g.slime_dont_ask_default = 1
  -- for ipython set %autoindent to OFF
  vim.g.slime_python_ipython = 1
  vim.g.slime_paste_file = "{{env_var "HOME"}}/.slime_paste"
  vim.g.slime_dispatch_ipython_pause = 100
  vim.g.slime_bracketed_paste = 1
end

-- ]]]
-- [[[ 'a' module options

-- a.vim
vim.g.alternateRelativeFiles   = 1
vim.g.alternateExtensions_blk  = "h"
vim.g.alternateExtensions_blkk = "h"
vim.g.alternateExtensions_h    = "c,cpp,cxx,cc,CC,blk,blkk"
vim.g.alternateSearchPath = 'sfr:../src,sfr:../../src,sfr:../include'

-- ]]]
-- [[[ LSP

-- rust
vim.cmd(":packadd rustaceanvim")
-- main conf in vim.g.rustaceanvim
-- conf via after/ftplugin/rust.lua

vim.g.rustaceanvim = {
  -- Plugin configuration
  tools = {
  },
  -- LSP configuration
  server = {
    on_attach = function(client, bufnr)
      -- you can also put keymaps in here
    end,
    default_settings = {
      -- rust-analyzer language server configuration
      ['rust-analyzer'] = {
      },
    },
  },
  -- DAP configuration
  dap = {
  },
}

-- LSP shortcuts
vim.lsp.set_log_level('off')
-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md

-- python
lsp.ruff.setup {
  init_options = {
    settings = {
      lineLength = 100
    }
  }
  -- on_attach = on_attach
}

-- C++
lsp.clangd.setup {
  on_attach = vim.schedule_wrap(function()
    vim.keymap.set("n", "<leader>h", "<cmd>ClangdSwitchSourceHeader<CR>")
  end),
}

-- ]]]
-- [[[ gundo/mundo/undotree

vim.cmd("packadd undotree")
vim.g.undotree_WindowLayout = 2 -- full width diff
vim.g.undotree_SplitWidth = 40 -- default (30) is too short
vim.g.undotree_SetFocusWhenToggle = 1 -- get focus on toggle
vim.api.nvim_set_keymap('n', '<F5>', ':UndotreeToggle<CR>', { noremap = true })

vim.opt.undofile = true

-- ]]]
-- [[[ vimwiki

vim.cmd("packadd vimwiki")
-- let wiki = {}
-- let wiki.nested_syntaxes = {'bash': 'sh', 'python': 'python', 'c++': 'cpp', 'rust': 'rust'}
-- let g:vimwiki_list = [wiki]

-- ]]]
-- [[[ user colors

vim.cmd([[
" define at end as all plugin try to clear colors
hi User1 term=inverse,bold ctermfg=DarkBlue ctermbg=Black
hi User2 term=inverse,bold ctermfg=DarkRed ctermbg=Black
hi User3 term=inverse,bold ctermfg=DarkMagenta ctermbg=Black
hi User4 term=inverse,bold ctermfg=DarkGreen ctermbg=Black
hi User5 term=inverse,bold ctermfg=DarkYellow ctermbg=Black
hi User6 term=inverse,bold ctermfg=DarkCyan ctermbg=Black
hi User7 term=inverse,bold ctermfg=White ctermbg=Black
]])

-- dotter/handlebars+fold incompatibility: temporary [ instead of {
-- vim: foldmethod=marker
-- vim: foldmarker=[[[,]]]
-- vim: filetype=lua
